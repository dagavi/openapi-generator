# coding: utf-8

# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the cqqs manually.

{{#models}}
{{#model}}
{{#isEnum}}

{{>model-enum}}
{{/isEnum}}
{{^isEnum}}

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401

{{#pyImports}}
{{import}}
{{/pyImports}}

class {{classname}}(BaseModel):
    """
    {{description}}

    {{#vars}}
        {{baseName}}: {{description}}{{^required}} [Optional]{{/required}}.
    {{/vars}}
    """

{{#vars}}
    {{name}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}{{>model_field_type}} | None{{/required}} = Field(alias="{{baseName}}"{{^required}}, default=None{{/required}})
{{/vars}}
{{#vars}}
{{#maximum}}

    @validator("{{name}}")
    def {{name}}_max(cls, value):
        assert value <= {{maximum}}
        return value
{{/maximum}}
{{#minimum}}

    @validator("{{name}}")
    def {{name}}_min(cls, value):
        assert value >= {{minimum}}
        return value
{{/minimum}}
{{#minLength}}

    @validator("{{name}}")
    def {{name}}_min_length(cls, value):
        assert len(value) >= {{minLength}}
        return value
{{/minLength}}
{{#maxLength}}

    @validator("{{name}}")
    def {{name}}_max_length(cls, value):
        assert len(value) <= {{maxLength}}
        return value
{{/maxLength}}
{{#pattern}}

    @validator("{{name}}")
    def {{name}}_pattern(cls, value):
        assert value is not None and re.match(r"{{pattern}}", value)
        return value
{{/pattern}}
{{/vars}}

    class Config:
        allow_population_by_field_name = True


{{classname}}.update_forward_refs()
{{/isEnum}}

{{/model}}
{{/models}}