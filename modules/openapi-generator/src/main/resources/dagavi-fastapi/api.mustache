# coding: utf-8

from typing import Dict, List  # noqa: F401

from fastapi import (  # noqa: F401
    APIRouter,
    Body,
    Cookie,
    Depends,
    Form,
    Header,
    Path,
    Query,
    Response,
    Security,
    status,
)
from {{packageName}}.dependencies.query_model import json_parameter
from {{modelPackage}}.extra_models import TokenModel  # noqa: F401
{{#imports}}
{{import}}
{{/imports}}
{{#securityImports.0}}from {{packageName}}.security_api import {{#securityImports}}get_token_{{.}}{{^-last}}, {{/-last}}{{/securityImports}}{{/securityImports.0}}

router = APIRouter()

{{#operations}}
{{#operation}}
@router.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(
    "{{path}}",
    {{#responses}}
    {{#-first}}
    {{#dataType}}
    response_model = {{dataType}},
    {{/dataType}}
    responses = {
    {{/-first}}
        {{code}}: {{=<% %>=}}{<%#dataType%>"model": <%dataType%>, "description": "<%message%>"<%/dataType%><%^dataType%>"description": "<%message%>"<%/dataType%>}<%={{ }}=%>,
    {{#-last}}
    },
    {{/-last}}
    {{/responses}}
    tags=[{{#tags}}"{{name}}"{{^-last}},{{/-last}}{{/tags}}],
    {{#summary}}
    summary="""{{{.}}}""",
    {{/summary}}
    {{#description}}
    description = """{{{.}}}""",
    {{/description}}
    response_model_by_alias = True,
    response_model_exclude_none = True
)
async def {{operationId}}(
    {{#allParams}}
    {{>api-endpoint_argument_definition}},
    {{/allParams}}
    {{#hasAuthMethods}}
    {{#authMethods}}
    token_{{name}}: TokenModel = Security(
        get_token_{{name}}{{#isOAuth}}, scopes=[{{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}
    ),
    {{/authMethods}}
    {{/hasAuthMethods}}
) -> {{returnType}}{{^returnType}}None{{/returnType}}:
    {{#notes}}"""{{{.}}}"""{{/notes}}
    # TODO: Implement "{{operationId}}"
    print(f'Warning: Implement "{{operationId}}"')
{{^-last}}

{{/-last}}
{{/operation}}
{{/operations}}
